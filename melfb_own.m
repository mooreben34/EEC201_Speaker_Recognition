%% EEC 201 Final Project | B. Speech Processing | 2B or not 2B

%-------------------------------------------------------------------------%
% Function Definition: melb_own.m
% Extract the MFCC coefficients needed for speaker classification

% Inputs:
% audio_file   - speaker for which MFCC coefficients will be generated
% frame_size            - Frame Size for STFT (Typical are N=128, 256, 512)
% num_FilterBanks            - Number of Mel Filter Banks
% num_coefficeints - Number of MFCC coefficients

% Outputs:
% MFCC_own     - MFCCs generated by group implementation
% MFCC_MATLAB  - MFCCs generated by MATLAB built in function mfcc.m

% Dependencies:
% melfb.m      - Generates Mel Filter Banks 
%-------------------------------------------------------------------------%

function [MFCC_own, MFCC_MATLAB] = melfb_own(audio_file, frame_size, num_FilterBanks, num_coefficeints, show)
    
 % ========================================================================
    [signal_t, fs] = audioread(audio_file);  
    ZCR=mean(abs(diff(sign(signal_t))));
    
    % normalization
    signal_t = signal_t ./ max(abs(signal_t));
    
    % Filter noise, remove silence
    
    
 % Plotting ---------------------------------------------------------------
    if show == true
        % Plot the time-domain signal
        subplot(3,2,1)
        plot(signal_t)
        title("Time Domain")
        xlabel('Time')
        xlabel('Amplitude')

        % Use STFT to generate periodogram
        subplot(3,2,2)
        stft(signal_t,fs,'Window',hamming(frame_size, 'periodic'),'OverlapLength',...
            round(frame_size/3),'FFTLength',frame_size, 'FrequencyRange', 'onesided');
        colormap(jet);
    end 
 % ========================================================================   

 % Extract STFT matrix ----------------------------------------------------
    [S,F,T] = stft(signal_t,fs,'Window',hamming(frame_size, 'periodic'),'OverlapLength',...
        ceil(frame_size/3),'FFTLength',frame_size, 'FrequencyRange', 'onesided');

    % Convert STFT to Periodogram (PSD)
    s_power = (abs(S).^2)/frame_size;

    % Convolve signal with Mel Filter Banks
    m = melfb(num_FilterBanks, frame_size, fs);
    Mel_Spectrogram = m * s_power;
    Mel_Spectrogram_log = log10(abs(Mel_Spectrogram));

    % Convert Frequency Axis to Mel Scale (To accurately show Mel Frequency Wrapping)
    b = hz2mel([0,max(F)]);
    melVect = linspace(b(1),b(2),num_FilterBanks);
    F_mel = mel2hz(melVect)./1000; % Display in KHz 
 % ========================================================================
  
 % Plotting ---------------------------------------------------------------
    if show == true
        % Plot the Mel Spectrogram
        subplot(3,2,3)
        surf(T,F_mel, 10 * Mel_Spectrogram_log,'EdgeColor','none');
        colorbar
        colormap jet;
        axis tight;
        title("Mel Spectrogram: Own")
        ylabel('Frequency (KHz)')
        view(0,90);

        % Compare with MATLAB melSpectrogram Function
        subplot(3,2,4)
        melSpectrogram(signal_t,fs,'NumBands',num_FilterBanks,'Window',hamming(frame_size, 'periodic'), ...
            'OverlapLength',ceil(frame_size/3),'FFTLength',frame_size, 'WindowNormalization', 0, ...
            'SpectrumType', 'power');
        colormap(jet);
        title("Mel Spectrogram: MATLAB")
    end
 % ========================================================================
    
    % Generate MFCCs
    cepstrum = dct(Mel_Spectrogram_log);
    %cepstrum_normalized = (cepstrum - mean(cepstrum)) ./ max(max((cepstrum)));
    %cepstrum_normalized = (cepstrum - mean(cepstrum));                      %Used to normalize (two methods)
    cepstrum_normalized = cepstrum ./std(cepstrum);
    
    % Dimension matching for Plotting MFCCs
    MFCC_own = cepstrum_normalized(2:num_coefficeints,:) ;                 %subtracting 1st coefficient
    t = linspace(0,length(signal_t),size(Mel_Spectrogram_log, 2))';
    f = (1:num_coefficeints-1)';

    % Matlab Truth MFCCs
    MFCC_MATLAB = mfcc(S,fs,"LogEnergy","Replace",'Window',...               % og Ignore
        hamming(frame_size, 'periodic'), 'OverlapLength', floor(frame_size/3),'NumCoeffs',num_coefficeints);
    f2 = (1:num_coefficeints)';                                             %debugging

    if show == true
        % Plot MFCC Coefficients using own implementation
        subplot(3,2,5);
        surf(t,f,MFCC_own,'EdgeColor', 'none');
        title("MFCC - Own")
        colorbar
        colormap jet;
        axis tight;
        ylabel('MFCC')
        xlabel('Time')
        view(0,90);

        % Plot MFCC Coefficients using MATLAB implementation
        subplot(3,2,6);
        surf(t,f2,MFCC_MATLAB','EdgeColor', 'none');
        title("MFCC - MATLAB")
        colorbar
        colormap jet;
        axis tight;
        ylabel('MFCC')
        xlabel('Time')
        view(0,90);

        sgtitle(["Feature Extraction: ",(audio_file)]) 
    end
% =========================================================================

end